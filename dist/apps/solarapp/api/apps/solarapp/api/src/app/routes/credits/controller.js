var o=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var u=(s,e)=>{for(var n in e)o(s,n,{get:e[n],enumerable:!0})},d=(s,e,n,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of l(e))!y.call(s,t)&&t!==n&&o(s,t,{get:()=>e[t],enumerable:!(a=c(e,t))||a.enumerable});return s};var p=s=>d(o({},"__esModule",{value:!0}),s);var f={};u(f,{Credits:()=>m});module.exports=p(f);var i=require("../../utils/creditsUtils"),r=require("../../../shared/clients");class m{static async Post(e,n){const a=e.body?.device;let t;return a.type==="solar panel"&&(t=await(0,i.calculateDailyCarbonCredits)(a.locationObject?.latitude,a.locationObject?.longitude,a.deviceSpecs.size,a.deviceSpecs.powerOutput,a.id)),a.type==="solar geyser"&&(t=await(0,i.calculateDailyCarbonCredits)(a.locationObject?.latitude,a.locationObject?.longitude,a.deviceSpecs.capacity,a.deviceSpecs.occupants,a.id)),n.status(200).send({credits:t.dailyCarbonReduction})}static async Get(e,n){try{const t=await(0,r.DBClient)().credits.aggregate({_sum:{amount:!0}});n.status(200).send({total:t?._sum.amount})}catch{throw new Error("Could not fetch credits")}}}0&&(module.exports={Credits});
