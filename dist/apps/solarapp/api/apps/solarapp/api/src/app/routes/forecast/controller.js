var d=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var v=(e,a)=>{for(var s in a)r(e,s,{get:a[s],enumerable:!0})},p=(e,a,s,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let o of S(a))!m.call(e,o)&&o!==s&&r(e,o,{get:()=>a[o],enumerable:!(t=f(a,o))||t.enumerable});return e};var I=(e,a,s)=>(s=e!=null?d(u(e)):{},p(a||!e||!e.__esModule?r(s,"default",{value:e,enumerable:!0}):s,e)),F=e=>p(r({},"__esModule",{value:!0}),e);var P={};v(P,{Forecast:()=>g});module.exports=F(P);var i=require("../../utils/forcast"),n=require("../../utils/constants"),y=I(require("../../../shared/logger"));class g{static async Post(a,s){try{const t=a.body?.device,o=t.locationObject?.latitude,l=t.locationObject?.longitude;if(t.type==="solar geyser"){const c=await(0,i.showPVForecast)(o,l,t.deviceSpecs.capacity,t.deviceSpecs?.occupants,n.FORECAST_DAYS);return s.send({forcast:c})}if(t.type==="solar panel"){const c=await(0,i.showPVForecast)(o,l,t.deviceSpecs.size,t.deviceSpecs?.powerOutput,n.FORECAST_DAYS);return s.send({forcast:c})}}catch(t){(0,y.default)(t)}}}0&&(module.exports={Forecast});
