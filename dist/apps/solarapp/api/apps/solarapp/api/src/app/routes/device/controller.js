var l=Object.create;var o=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var h=(r,e)=>{for(var a in e)o(r,a,{get:e[a],enumerable:!0})},y=(r,e,a,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of w(e))!I.call(r,s)&&s!==a&&o(r,s,{get:()=>e[s],enumerable:!(t=v(e,s))||t.enumerable});return r};var F=(r,e,a)=>(a=r!=null?l(f(r)):{},y(e||!r||!r.__esModule?o(a,"default",{value:r,enumerable:!0}):a,r)),R=r=>y(o({},"__esModule",{value:!0}),r);var D={};h(D,{Device:()=>g});module.exports=R(D);var n=F(require("../../../shared/logger")),c=require("../../../shared/clients");class g{static async Post(e,a){try{const t=(0,c.DBClient)(),s={userId:e.body?.userId,device:e.body?.device};(0,n.default)(s);const i=await t.device.create({data:{title:s.device.title,serialNo:s.device.serialNo,type:s.device.type,comments:s.device.comments,deviceSpecs:s.device.deviceSpecs,locationObject:s.device.locationObject,userId:s.userId}});a.status(200).send({response:i})}catch(t){throw(0,n.default)(t),new Error("Could not register device")}}static async Get(e,a){try{const t=(0,c.DBClient)(),s={userId:e.params?.userId},u=(await t.device.findMany({where:{userId:parseInt(s.userId),deletedAt:null},orderBy:{id:"desc"}})).map(async d=>{const m=await t.credits.aggregate({_sum:{amount:!0},where:{deviceId:d.id}});return{...d,credits:m._sum.amount??0}}),p=(await Promise.allSettled(u))?.map(d=>d?.value);a.status(200).send({response:p})}catch(t){throw(0,n.default)(t),new Error("Could not fetch devices")}}static async Delete(e,a){try{const t=e.params.id,i=await(0,c.DBClient)().device.update({where:{id:parseInt(t)},data:{deletedAt:new Date}});a.status(200).send({response:i})}catch{throw new Error("Could not delete")}}static async Put(e,a){try{const t=e.body?.device,i=await(0,c.DBClient)().device.update({where:{id:t.id},data:t});a.status(200).send({response:i})}catch{throw new Error("Could not update")}}}0&&(module.exports={Device});
