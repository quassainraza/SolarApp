var y=Object.create;var m=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(r,e)=>{for(var n in e)m(r,n,{get:e[n],enumerable:!0})},p=(r,e,n,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of h(e))!f.call(r,t)&&t!==n&&m(r,t,{get:()=>e[t],enumerable:!(o=_(e,t))||o.enumerable});return r};var d=(r,e,n)=>(n=r!=null?y(F(r)):{},p(e||!r||!r.__esModule?m(n,"default",{value:r,enumerable:!0}):n,r)),x=r=>p(m({},"__esModule",{value:!0}),r);var j={};v(j,{showPVForecast:()=>$});module.exports=x(j);var l=d(require("axios")),b=require("./constants"),s=d(require("../../shared/logger"));const P=async(r,e)=>{const o=`https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=${b.NREL_API}&lat=${r}&lon=${e}&all=1`;try{const i=(await l.default.get(o)).data.outputs.avg_dni.monthly;return Object.keys(i).map(c=>i[c])}catch(t){return console.error("Error fetching solar radiation forecast data:",t.message),[]}},w=(r,e,n)=>r*e*n,$=async(r,e,n,o,t)=>{const i=await P(r,e),u=[];(0,s.default)("latitude",r),(0,s.default)("longitude",e),(0,s.default)("panelSize",n),(0,s.default)("powerOutput",o),(0,s.default)("days",t);for(let a=0;a<t&&a<i.length;a++){const c=i[a],g=w(parseFloat(n),parseFloat(o),c);u.push({day:a+1,direct_normal_irradiance:c.toFixed(2),pv_generation:g.toFixed(2)})}return u};0&&(module.exports={showPVForecast});
