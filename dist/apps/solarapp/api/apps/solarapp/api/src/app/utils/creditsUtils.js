var R=Object.create;var c=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var D=(n,o)=>{for(var t in o)c(n,t,{get:o[t],enumerable:!0})},b=(n,o,t,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of E(o))!x.call(n,e)&&e!==t&&c(n,e,{get:()=>o[e],enumerable:!(r=_(o,e))||r.enumerable});return n};var m=(n,o,t)=>(t=n!=null?R(I(n)):{},b(o||!n||!n.__esModule?c(t,"default",{value:n,enumerable:!0}):t,n)),G=n=>b(c({},"__esModule",{value:!0}),n);var w={};D(w,{calculateDailyCarbonCredits:()=>k,getContinent:()=>f,getCountry:()=>d});module.exports=G(w);var s=require("./constants"),p=m(require("axios")),l=m(require("countries-list")),N=m(require("country-reverse-geocoding"));const d=(n,o)=>{const t=N.country_reverse_geocoding(),{code:r,name:e}=t.get_country(n,o);return{code:r,name:e}},f=n=>{const o=l.getCountryCode(n),t=l.getCountryData(o);return{name:t.name,native:t.native,phone:t.phone,continent:t.continent,continents:t.continents,capital:t.capital,currency:t.currency,languages:t.languages,iso2:t.iso2,iso3:t.iso3}},y=(n,o)=>{const t=d(n,o).name,e=f(t).continent??t;return s.CONSTANTS.find(a=>a.region===e)},S=async(n,o)=>{const r=`https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=${s.NREL_API}&lat=${n}&lon=${o}`;try{const e=await p.default.get(r);if(e.data.outputs.avg_ghi==="no data")return y(n,o).srf;const a=e.data.outputs.avg_ghi?.monthly,i=Object.keys(a),u=new Date().getMonth();return a[i[u]]||0}catch(e){return console.error("Error fetching solar radiation data:",e?.message),y(n,o).srf}},k=async(n,o,t,r,e)=>{const a=y(n,o).cif,i=.95,u=C=>{const v=C/1e3;return t*r*v},g=await S(n,o),h=u(g)*a*i;return{deviceId:e,dailyCarbonReduction:h}};0&&(module.exports={calculateDailyCarbonCredits,getContinent,getCountry});
